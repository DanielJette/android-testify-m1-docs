buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
    }
}

plugins {
    id 'groovy'
    id 'kotlin'
    id 'org.jetbrains.dokka'
    id 'maven'
    id 'signing'
}

def VERSION_NAME = "$project.versions.testify"
sourceCompatibility = 1.8

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

dependencies {
    implementation "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
    implementation gradleApi()
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
}

repositories {
    mavenCentral()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

ext {
    pom = [
            publishedGroupId  : 'com.shopify.testify',
            artifact          : 'plugin',
            libraryName       : 'testify-plugin',
            libraryDescription: 'Android screenshot instrumentation tests plugin.',
            siteUrl           : 'https://github.com/Shopify/android-testify',
            gitUrl            : 'https://github.com/Shopify/android-testify.git',
            licenseName       : 'The MIT License',
            licenseUrl        : 'https://opensource.org/licenses/MIT',
            author            : 'Shopify Inc.'
    ]
}

group = pom.publishedGroupId
archivesBaseName = pom.artifact
version = VERSION_NAME

jar {
    manifest {
        attributes "Implementation-Title": "Testify"
        attributes "Implementation-Vendor": "Shopify"
        attributes "Implementation-Version": version
    }
}

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"

    configuration {
        includeNonPublic = false
        reportUndocumented = false
    }

}

task sourcesJar(type: Jar) {
    from sourceSets.main.groovy.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    baseName = 'testify'
    from dokka.outputDirectory
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task configureLocal {
    doFirst {
        version = "local"
        jar.manifest.attributes.put("Implementation-Version", version)
    }
}

task copyLocal(type: Copy) {
    from "$buildDir/libs/${project.name}-local.jar"
    into 'jar'
}

task assembleLocal(description: 'Assembles the outputs of this project for use locally.', group: 'Build') {
    dependsOn configureLocal
    dependsOn build
    dependsOn copyLocal

    build.mustRunAfter configureLocal
    copyLocal.mustRunAfter build
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv("OSSRH_USERNAME"), password: System.getenv("OSSRH_PASSWORD"))
            }

            pom {
                project {
                    groupId project.ext.pom.publishedGroupId
                    artifactId project.ext.pom.artifact

                    name project.ext.pom.libraryName
                    description project.ext.pom.libraryDescription
                    url project.ext.pom.siteUrl

                    developers {
                        developer {
                            name project.ext.pom.author
                        }
                    }

                    licenses {
                        license {
                            name project.ext.pom.licenseName
                            url project.ext.pom.licenseUrl
                        }
                    }

                    scm {
                        connection = project.ext.pom.gitUrl
                        developerConnection = project.ext.pom.gitUrl
                        url = project.ext.pom.siteUrl
                    }
                }
            }
        }
    }
}

apply from: '../../ktlint.gradle'
